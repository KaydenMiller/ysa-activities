@page "/activities"
@using LaytonYSAClerk.WebTool.Services
@rendermode InteractiveServer
@inject MemberService MemberService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudContainer>
    <MudPaper>
        <MudText Typo="Typo.h1">Activities</MudText>
        
        <MudTable T="ChurchActivity" Items="@_activities">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Created At</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Created At">@DateTime.Today.ToString("d")</MudTd>
                <MudTd DataLabel="Actions">
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => GotoActivity(context.Name))">Details</MudButton>
                    <MudButton Color="Color.Error" Variant="Variant.Outlined" OnClick="@(() => OpenDeleteActivityDialog(context.Name))">Delete</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>
    
    <MudIconButton Icon="@Icons.Material.Filled.Add" 
                   Color="Color.Primary"
                   Variant="Variant.Filled"
                   Style="position: fixed; bottom: 50px; right: 50px;"
                   OnClick="OpenCreateActivityDialog"/>
</MudContainer>

@code {
    IEnumerable<ChurchActivity> _activities = [];

    protected override async Task OnInitializedAsync()
    {
        await GetActivities();
    }

    private async Task GetActivities()
    {
        _activities = await MemberService.GetActivities();
        StateHasChanged();
    }
    
    private async Task OpenCreateActivityDialog()
    {
        var dialogRef = await DialogService.ShowAsync<CreateActivityModal>("Create Activity", new DialogOptions()
        {
            BackdropClick = false,
            CloseOnEscapeKey = true,
            FullScreen = false
        });
        var dialogResult = await dialogRef.Result;

        if (!dialogResult!.Canceled)
        {
            await MemberService.CreateActivity(dialogResult.Data!.ToString()!);
            await GetActivities();
        }
    }

    private async Task OpenDeleteActivityDialog(string activityName)
    {
        var dialogRef = await DialogService.ShowMessageBox($"Delete Activity {activityName}?", "Are you sure you want to delete this activity?", "Yes", "No");

        if (dialogRef is true)
        {
            // we want to delete the activity
            await MemberService.DeleteActivity(activityName);
            Snackbar.Add($"Activity {activityName} was deleted!", Severity.Success);
            await GetActivities();
        }
    }

    private void GotoActivity(string activityName)
    {
        NavigationManager.NavigateTo($"/activities/{activityName}");
    }
}