@using LaytonYSAClerk.WebTool.Services
@using MongoDB.Bson
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ActivityRepository ActivityRepository

<MudCard>
    <MudCardHeader>
        <MudText>
            @(string.Join(", ", Group.GroupMembers.Select(m => m.Name)))
        </MudText>
    </MudCardHeader>
    <MudCardContent>
        <ul>
            @foreach (var member in Group.ObjectiveMembers ?? [])
            {
                <li>@member.Name</li>
            }
        </ul>
    </MudCardContent>
    <MudCardActions>
        <MudButton OnClick="@(() => ActivityGroupDetails(Group.GroupId))">Details</MudButton>
    </MudCardActions>
</MudCard>

<MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="ClearAllGroups" Style="position: fixed; bottom: 50px; right: 50px;">Clear Groups</MudButton>

@code {

    [Parameter]
    public ObjectId ActivityId { get; set; }
    
    [Parameter]
    public MemberGroup Group { get; set; } = null!;

    private async Task ClearAllGroups()
    {
        var dialog = await DialogService.ShowAsync<PasswordDialog>("Delete Groups Password", new DialogOptions()
        {
            FullScreen = false,
            CloseOnEscapeKey = true,
            BackdropClick = true
        });
        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            // check the password
            var password = result.Data!.ToString();

            if (password is "clear")
            {
                await ActivityRepository.ClearGroups(ActivityId);
                NavigationManager.NavigateTo($"/activities");
            }
        }
    }

    private void ActivityGroupDetails(ObjectId id)
    {
        NavigationManager.NavigateTo($"/activities/{ActivityId.ToString()}/group/{id.ToString()}");
    }
}