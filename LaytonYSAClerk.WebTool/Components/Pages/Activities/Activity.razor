@page "/activities/{ActivityName:alpha}"
@using Church.Ysa.Domain
@using LaytonYSAClerk.WebTool.Services
@rendermode InteractiveServer
@inject MemberService MemberService
@inject ActivityRepository ActivityRepository
@inject NavigationManager Navigation
@inject ILogger<Activity> Logger
@inject IDialogService DialogService

<MudContainer>
    <MudPaper>
        <MudText Typo="Typo.h1">@(ChurchActivity?.Name ?? "")</MudText>

        <MudDivider/>

        <MudForm>
            <MudText Typo="Typo.h5">Sign Up</MudText>
            <MudText Typo="Typo.body1">Please enter your name in order to join the activity.</MudText>
        </MudForm>

        <MudDivider/>
        
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudText Typo="Typo.h4">Joined Members</MudText>
                <MudDataGrid T="SimpleMember" Items="JoinedMembers">
                    <Columns>
                        <PropertyColumn Property="member => member.Name" Title="Name"/>
                        <PropertyColumn Property="member => member.Gender" Title="Gender"/>
                        <TemplateColumn>
                            <CellTemplate>
                                <MudStack Row>
                                    <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Error"
                                               OnClick="@(async () => await RemoveMember(context.Item))">Remove
                                    </MudButton>
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudText Typo="Typo.h4">Members to Fellowship</MudText>
                <MudDataGrid T="SimpleMember" Items="MembersToFellowship">
                    <Columns>
                        <PropertyColumn Property="member => member.Name" Title="Name"/>
                        <PropertyColumn Property="member => member.Gender" Title="Gender"/>
                        <TemplateColumn>
                            <CellTemplate>
                                <MudStack Row>
                                    <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Error"
                                               OnClick="@(async () => await RemoveMemberToFellowship(context.Item))">Remove
                                    </MudButton>
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            </MudItem>
        </MudGrid>


        <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled"
                        OverrideStyles="false"
                        Style="position: fixed; bottom: 50px; right: 50px;">
            <MudButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" Variant="Variant.Filled"
                       OnClick="AddMember">Join
            </MudButton>
            <MudButton Icon="@Icons.Material.Filled.Add" Color="Color.Secondary" Variant="Variant.Filled"
                       OnClick="AddMemberToFellowship">Add Fellowship
            </MudButton>
            <MudButton Icon="@Icons.Material.Filled.Group" Color="Color.Warning" Variant="Variant.Filled"
                       OnClick="@(async () => await GenerateGroups())">Groups
            </MudButton>
        </MudButtonGroup>
    </MudPaper>
</MudContainer>

@code {

    [Parameter]
    public string ActivityName { get; set; } = null!;

    public ChurchActivity? ChurchActivity = null!;

    public IEnumerable<SimpleMember> JoinedMembers { get; set; }
    public IEnumerable<SimpleMember> MembersToFellowship { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await UpdateElements();
    }

    private async Task UpdateElements()
    {
        ChurchActivity = await MemberService.FindActivityByName(ActivityName);
        JoinedMembers = ChurchActivity.JoinedMembers;
        MembersToFellowship = ChurchActivity.MembersToFellowship;
        StateHasChanged();
    }

    private async Task RemoveMember(SimpleMember member)
    {
        await ActivityRepository.RemoveMemberFromActivity(member, ChurchActivity!.Id);
        await UpdateElements();
    }

    private async Task AddMember()
    {
        var memberResult = await OpenMemberJoinDialog("Join Activity");
        if (memberResult is null) return;
        await ActivityRepository.AddMemberToActivity(memberResult, ChurchActivity!.Id);
        await UpdateElements();
    }

    private async Task AddMemberToFellowship()
    {
        var memberResult = await OpenMemberJoinDialog("Add Member To Fellowship");
        if (memberResult is null) return;
        await ActivityRepository.AddFellowshipMemberToActivity(memberResult, ChurchActivity!.Id);
        await UpdateElements();
    }

    private async Task RemoveMemberToFellowship(SimpleMember member)
    {
        await ActivityRepository.RemoveFellowshipMemberFromActivity(member, ChurchActivity!.Id);
        await UpdateElements();
    }

    private async Task GenerateGroups()
    {
        // var availableMembers = DroppableMembers.Where(d => d.Dropzone is "Available");
        var result = await MemberService.GeneratePartners(ActivityName);
        if (result)
        {
            NavigateToGroups();
        }
        else
        {
            Logger.LogWarning("Unable to navigate to groups partner generation failed");
        }
    }

    private void NavigateToGroups()
    {
        Navigation.NavigateTo($"/activities/{ActivityName}/groups");
    }

    private async Task<SimpleMember?> OpenMemberJoinDialog(string title)
    {
        var dialogParams = new DialogParameters<MemberJoinActivityDialog>
        {
            { x => x.ActivityName, ActivityName }
        };

        var dialog = await DialogService.ShowAsync<MemberJoinActivityDialog>(title, dialogParams, new DialogOptions
        {
            BackdropClick = false,
            CloseOnEscapeKey = true,
            FullScreen = false
        });
        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            var member = result.Data as SimpleMember;
            return member;
        }

        return null;
    }

}