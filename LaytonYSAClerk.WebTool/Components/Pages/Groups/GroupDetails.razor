@page "/activities/{ActivityId}/group/{GroupId}"
@using LaytonYSAClerk.WebTool.Services
@using MongoDB.Bson
@using LaytonYSAClerk.WebTool.Components.Shared
@inject ActivityRepository ActivityRepository
@inject ISnackbar Snackbar

<MudContainer>
    <MudPaper Elevation="2" Style="padding: 10px;">
        <MudText Typo="Typo.h4">Group Containing</MudText>
        <MudStack Style="padding-left: 25px;">
            @foreach (var member in Group?.GroupMembers ?? [])
            {
                <MemberInfoBlock Member="member" />
            }
        </MudStack>

        <MudText Typo="Typo.h4">Members to Fellowship</MudText>
        <MudStack Style="padding-left: 25px;">
            @foreach (var friend in Group?.ObjectiveMembers ?? [])
            {
                <MemberInfoBlock Member="friend" OnNoteUpdated="UpdateNote" Edit="true"/>
            }
        </MudStack>
        <MudDivider/>
        
        <MudText Typo="Typo.h4">Notes</MudText>
        <MudStack>
            @foreach (var note in Group?.Notes ?? [])
            {
                <div>
                    <MudText Typo="@Typo.subtitle1">@note.Member.Name</MudText>
                    <MudText Typo="Typo.body1">@note.Note</MudText>
                </div>
            }
        </MudStack>
    </MudPaper>
</MudContainer>

@code {

    [Parameter]
    public string ActivityId { get; set; }

    [Parameter]
    public string GroupId { get; set; }

    private MemberGroup? Group { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task RefreshData()
    {
        Group = await ActivityRepository.GetMemberGroup(ObjectId.Parse(ActivityId), ObjectId.Parse(GroupId));
    }

    private async Task UpdateNote(MemberNote note)
    {
        var currentNotes = Group!.Notes;
        List<MemberNote> updatedNotes = [
            ..currentNotes,
            note
        ];
        await ActivityRepository.UpsertMemberGroup(ObjectId.Parse(ActivityId), Group! with
        {
            Notes = updatedNotes
        });
        Snackbar.Add("Notes updated", Severity.Success);
        await RefreshData();
    }
}